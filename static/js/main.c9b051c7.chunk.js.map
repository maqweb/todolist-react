{"version":3,"sources":["components/TodoListHeader/TodoListHeader.jsx","components/TodoListTasks/Task/Task.jsx","components/TodoListTasks/TodoListTasks.jsx","components/TodoListFooter/TodoListFooter.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoListHeader","state","error","title","onAddTaskClick","newText","_this","setState","trim","props","addTask","onInputChange","e","currentTarget","value","keyPress","key","render","errorClass","react_default","a","createElement","className","type","onChange","onKeyPress","placeholder","onClick","React","Component","Task","onIsDoneChanged","changeStatus","task","checked","priorityClass","priority","isDoneClass","isDone","concat","TodoListTasks","tasksElement","tasks","map","TodoListTasks_Task_Task","id","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","App","newTask","length","newTasks","Object","toConsumableArray","newFilterValue","t","_objectSpread","components_TodoListHeader_TodoListHeader","components_TodoListTasks_TodoListTasks","filter","components_TodoListFooter_TodoListFooter","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9b051c7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../App.css'\n\nclass TodoListHeader extends React.Component {\n\n    state = {\n        error: false,\n        title: ''\n    };\n\n    onAddTaskClick = () => {\n        let newText = this.state.title;\n        this.setState({title: ''});\n        if (newText.trim() === '') {\n            this.setState({\n                error: true\n            })\n        } else {\n            this.props.addTask(newText);\n            this.setState({\n                error: false\n            })\n        }\n    };\n\n    onInputChange = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    keyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.onAddTaskClick();\n            this.setState({\n                title: ''\n            })\n        }\n    };\n\n    render = (props) => {\n\n        let errorClass = this.state.error === true ? 'error' : '';\n\n        return (\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">What to Learn</h3>\n                <div className=\"todoList-newTaskForm\">\n\n                    <input type=\"text\"\n                           onChange={this.onInputChange}\n                           onKeyPress={this.keyPress}\n                           className={errorClass}\n                           value={this.state.title}\n                           placeholder=\"New task name\"/>\n\n                    <button onClick={this.onAddTaskClick}>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoListHeader;\n\nTodoListHeader.propTypes = {\n    onAddTaskClick: PropTypes.func\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Task extends React.Component {\r\n\r\n    onIsDoneChanged = (e) => {\r\n        this.props.changeStatus(this.props.task, e.currentTarget.checked)\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let priorityClass = this.props.task.priority === 'high' ? 'highPriority' :\r\n            this.props.task.priority === 'medium' ? 'mediumPriority' :\r\n                this.props.task.priority === 'low' ? 'lowPriority' : 'noPriority';\r\n\r\n        let isDoneClass = this.props.task.isDone === true ? 'done' : '';\r\n\r\n        return (\r\n            <div className='todoList-task'>\r\n\r\n                <input type='checkbox'\r\n                       checked={this.props.task.isDone}\r\n                       onChange={this.onIsDoneChanged}/>\r\n\r\n                <span className={`${priorityClass} ${isDoneClass}`}> {this.props.task.title} / priority - {this.props.task.priority}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;\r\n\r\nTask.propTypes = {\r\n    title: PropTypes.string\r\n};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Task from \"./Task/Task\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        const tasksElement = this.props.tasks.map(task => {\n            return <Task key={task.id}\n                         task={task}\n                         changeStatus={this.props.changeStatus}/>\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElement}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\nTodoListTasks.propTypes = {\n    tasks: PropTypes.array\n};","import React from 'react';\nimport './../../App.css';\nimport PropTypes from 'prop-types';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n      isHidden: false\n    };\n\n    onAllFilterClick = () => {\n        this.props.changeFilter('All')\n    };\n    onCompletedFilterClick = () => {\n        this.props.changeFilter('Completed')\n    };\n    onActiveFilterClick = () => {\n        this.props.changeFilter('Active')\n    };\n\n    onShowFiltersClick = () => {\n        this.setState({isHidden: true})\n    };\n    onHideFiltersClick = () => {\n        this.setState({isHidden: false})\n    };\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>}\n\n                {!this.state.isHidden && <span onClick={this.onShowFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onHideFiltersClick}>show</span>}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\nTodoListFooter.propTypes = {\n    filterValue: PropTypes.string\n};","import React from 'react';\nimport './App.css';\nimport TodoListHeader from './components/TodoListHeader/TodoListHeader';\nimport TodoListTasks from './components/TodoListTasks/TodoListTasks';\nimport TodoListFooter from './components/TodoListFooter/TodoListFooter';\n\nclass App extends React.Component {\n\n    state = {\n        tasks: [\n            {title: 'HTML', isDone: true, priority: 'low', id: 1},\n            {title: 'CSS', isDone: true, priority: 'low', id: 2},\n            {title: 'JS', isDone: true, priority: 'medium', id: 3},\n            {title: 'React', isDone: false, priority: 'high', id: 4},\n            {title: 'Redux', isDone: false, priority: 'high', id: 5}\n        ],\n        filterValue: \"All\"\n    };\n\n    addTask = (newText) => {\n        let newTask = {\n            title: newText,\n            isDone: false,\n            priority: 'no',\n            id: this.state.tasks.length + 1\n        };\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState({tasks: newTasks});\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        })\n    };\n\n    changeStatus = (task, isDone) => {\n        let newTasks = this.state.tasks.map(t => {\n            if (t !== task) {\n                return t;\n            } else {\n                return {...t, isDone: isDone}\n            }\n        });\n        this.setState({\n            tasks: newTasks\n        })\n    };\n\n    render = () => {\n\n        const getFilterTasks = (tasks) => {\n            return (\n                tasks.filter(t => {\n                    if (this.state.filterValue === 'All') {\n                        return true;\n                    } else if (this.state.filterValue === 'Active') {\n                        return t.isDone === false;\n                    } else if (this.state.filterValue === 'Completed') {\n                        return t.isDone === true;\n                    }\n                })\n            )\n        };\n\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <TodoListHeader addTask={this.addTask}/>\n\n                    <TodoListTasks tasks={getFilterTasks(this.state.tasks)}\n                                   changeStatus={this.changeStatus}/>\n\n                    <TodoListFooter filterValue={this.state.filterValue} changeFilter={this.changeFilter}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}