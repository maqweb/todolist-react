{"version":3,"sources":["serviceWorker.js","components/TodoListTasks/Task/Task.jsx","components/TodoListTasks/TodoListTasks.jsx","components/TodoListFooter/TodoListFooter.jsx","components/TodoListHeader/TodoListTitle.jsx","components/TodoListHeader/AddNewItemForm.jsx","store/reducer.js","TodoList.jsx","App.js","store/store.js","index.js"],"names":["Boolean","window","location","hostname","match","Task","state","editMode","onIsDoneChanged","e","currentTarget","checked","_this","props","changeStatus","task","id","onTitleChanged","changeTitle","value","activateEditMode","setState","deactivateEditMode","onDeleteTask","removeTask","render","priorityClass","priority","isDoneClass","isDone","react_default","a","createElement","className","status","type","onChange","onBlur","autoFocus","title","onClick","concat","React","Component","TodoListTasks","tasksElement","tasks","map","TodoListTasks_Task_Task","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","removeTodolist","AddNewItemForm","error","onAddItemClick","newTitle","trim","addItem","onInputChange","onKeyPress","errorClass","placeholder","initialState","todolists","reducer","arguments","length","undefined","action","_objectSpread","tl","newTodolist","Object","toConsumableArray","filter","todolistId","newTask","taskId","t","obj","TodoList","newFilterValue","saveState","restoreState","axios","get","withCredentials","headers","API-KEY","then","res","allTasks","data","items","setTasks","post","item","addTask","changeTask","find","updatedTask","TodoList_objectSpread","description","completed","startDate","deadline","put","console","log","changeTaskAC","delete","removeTodolistAC","_this$props$tasks","TodoListHeader_TodoListTitle","TodoListHeader_AddNewItemForm","components_TodoListTasks_TodoListTasks","getFilterTasks","components_TodoListFooter_TodoListFooter","this","ConnectedTodolist","connect","dispatch","setTaskAC","addTaskAC","updateTaskAC","removeTaskAC","App","setTodolist","addTodoList","addTodolist","todoLists","src_TodoList","Fragment","ConnectedApp","addTolistAC","resTodolist","store","createStore","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0634415e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Task extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n    };\r\n\r\n    onIsDoneChanged = (e) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        switch (status) {\r\n            case 2:\r\n                let trueStatus = 2;\r\n                return this.props.changeStatus(this.props.task.id, trueStatus);\r\n            default:\r\n                let falseStatus = 0;\r\n                return this.props.changeStatus(this.props.task.id, falseStatus);\r\n        }\r\n        // this.props.changeStatus(this.props.task.id, status);\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.props.changeTitle(this.props.task.id, e.currentTarget.value);\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    };\r\n\r\n    onDeleteTask = () => {\r\n        this.props.removeTask(this.props.task.id);\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let priorityClass = this.props.task.priority === 'high' ? 'highPriority' :\r\n            this.props.task.priority === 'medium' ? 'mediumPriority' :\r\n                this.props.task.priority === 'low' ? 'lowPriority' : 'noPriority';\r\n\r\n        let isDoneClass = this.props.task.isDone === true ? 'done' : '';\r\n\r\n        return (\r\n            <div className='todoList-task'>\r\n\r\n                {/*<input type='checkbox'*/}\r\n                {/*       checked={this.props.task.isDone}*/}\r\n                {/*       onChange={this.onIsDoneChanged}/>*/}\r\n\r\n                {this.props.task.status === 2\r\n                    ? <input type='checkbox'\r\n                             checked={true}\r\n                             onChange={this.onIsDoneChanged}/>\r\n                    : <input type='checkbox'\r\n                             checked={false}\r\n                             onChange={this.onIsDoneChanged}/>\r\n                }\r\n\r\n                {this.state.editMode ?\r\n                    <input onBlur={this.deactivateEditMode}\r\n                           autoFocus={true}\r\n                           onChange={this.onTitleChanged}\r\n                           value={this.props.task.title} type=\"text\"/>\r\n\r\n                    : <span onClick={this.activateEditMode}\r\n                            className={`${priorityClass} ${isDoneClass}`}> {this.props.task.title}</span>}\r\n                <span> - priority: {this.props.task.priority}</span>\r\n\r\n                <button className=\"btn-tasks\" onClick={this.onDeleteTask}>X</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;\r\n\r\nTask.propTypes = {\r\n    title: PropTypes.string\r\n};","import React from \"react\";\nimport Task from \"./Task/Task\";\n\nclass TodoListTasks extends React.Component {\n\n    render = () => {\n\n        const tasksElement = this.props.tasks.map(task => {\n            return <Task key={task.id}\n                         task={task}\n                         changeStatus={this.props.changeStatus}\n                         changeTitle={this.props.changeTitle}\n                         removeTask={this.props.removeTask}/>\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElement}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n","import React from 'react';\nimport './../../App.css';\nimport PropTypes from 'prop-types';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n      isHidden: false\n    };\n\n    onAllFilterClick = () => {\n        this.props.changeFilter('All')\n    };\n    onCompletedFilterClick = () => {\n        this.props.changeFilter('Completed')\n    };\n    onActiveFilterClick = () => {\n        this.props.changeFilter('Active')\n    };\n\n    onShowFiltersClick = () => {\n        this.setState({isHidden: true})\n    };\n    onHideFiltersClick = () => {\n        this.setState({isHidden: false})\n    };\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>}\n\n                {!this.state.isHidden && <button onClick={this.onShowFiltersClick}>hide</button>}\n                {this.state.isHidden && <button onClick={this.onHideFiltersClick}>show</button>}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\nTodoListFooter.propTypes = {\n    filterValue: PropTypes.string\n};","import React from 'react';\nimport '../../App.css'\n\nclass TodoListTitle extends React.Component {\n\n    render = () => {\n        return (\n                <div>\n                    <h3 className=\"todoList-header__title\">{this.props.title}</h3>\n                    <button onClick={this.props.removeTodolist} className=\"btn\">X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n","import React from 'react';\nimport '../../App.css'\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        title: ''\n    };\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title;\n        this.setState({title: ''});\n        if (newTitle.trim() === '') {\n            this.setState({\n                error: true\n            })\n        } else {\n            this.props.addItem(newTitle);\n            this.setState({\n                error: false\n            })\n        }\n    };\n\n    onInputChange = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick();\n            this.setState({\n                title: ''\n            })\n        }\n    };\n\n    render = () => {\n\n        let errorClass = this.state.error === true ? 'error' : '';\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n\n                <input type=\"text\"\n                       onChange={this.onInputChange}\n                       onKeyPress={this.onKeyPress}\n                       className={errorClass}\n                       value={this.state.title}\n                       placeholder=\"New item name\"/>\n\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","export const ADD_TODOLIST = 'ADD-TODOLIST';\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST';\nexport const ADD_TASK = 'ADD-TASK';\nexport const SET_TASKS = 'SET_TASKS';\nexport const REMOVE_TASK = 'REMOVE-TASK';\nexport const CHANGE_TASK = 'CHANGE-TASK';\nexport const SET_TODOLIST = 'SET_TODOLIST';\n\nconst initialState = {\n    todolists: [\n        // {\n        //     id: 1, title: \"first\", tasks: [\n        //         {title: \"html/css\", isDone: false, id: 1, priority: \"low\"},\n        //         {title: \"javascript\", isDone: false, id: 2, priority: \"high\"},\n        //         {title: \"react\", isDone: false, id: 3, priority: \"high\"},\n        //     ]\n        // },\n        // {id: 2, title: \"second\", tasks: []},\n        // {id: 3, title: \"third\", tasks: []},\n    ]\n};\n\nconst reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case SET_TODOLIST:\n            return {\n              ...state,\n              todolists: action.todolists.map(tl => ({...tl, tasks: []}) )\n            };\n\n        case ADD_TODOLIST:\n            return {\n                ...state,\n                todolists: [action.newTodolist, ...state.todolists]\n            };\n\n        case REMOVE_TODOLIST:\n            return {\n                ...state,\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\n            };\n\n        case SET_TASKS:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {...tl, tasks: action.tasks}\n                    } else {\n                        return tl;\n                    }\n                })\n            };\n\n        case ADD_TASK:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {...tl, tasks: [action.newTask, ...tl.tasks]}\n                    } else {\n                        return tl;\n                    }\n                })\n            };\n\n        case REMOVE_TASK:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {...tl, tasks: tl.tasks.filter(tl => tl.id !== action.taskId)}\n                    } else {\n                        return tl\n                    }\n                })\n            };\n\n        case CHANGE_TASK:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {\n                            ...tl,\n                            tasks: tl.tasks.map(t => {\n                                if (t.id === action.taskId) {\n                                    return {...t, ...action.obj}\n                                } else {\n                                    return t\n                                }\n                            }),\n                        }\n                    } else {\n                        return tl\n                    }\n                })\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport const setTodolistAc = (todolists) => {\n    return {type: SET_TODOLIST, todolists}\n};\n\nexport const addTolistAC = (newTodolist) => {\n    return {type: ADD_TODOLIST, newTodolist}\n};\n\nexport const removeTodolistAC = (todolistId) => {\n    return {type: REMOVE_TODOLIST, todolistId}\n};\n\nexport const setTaskAC = (tasks, todolistId) => {\n    return {type: SET_TASKS, tasks, todolistId}\n};\n\nexport const addTaskAC = (newTask, todolistId) => {\n    return {type: ADD_TASK, newTask, todolistId}\n};\n\nexport const updateTaskAC = (taskId, obj, todolistId) => {\n    return {type: CHANGE_TASK, taskId, obj, todolistId}\n};\n\nexport const removeTaskAC = (todolistId, taskId) => {\n    return {type: REMOVE_TASK, todolistId, taskId}\n};\n\nexport default reducer;\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from './components/TodoListTasks/TodoListTasks';\nimport TodoListFooter from './components/TodoListFooter/TodoListFooter';\nimport TodoListTitle from \"./components/TodoListHeader/TodoListTitle\";\nimport AddNewItemForm from \"./components/TodoListHeader/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTaskAC, removeTaskAC, removeTodolistAC, setTaskAC, updateTaskAC} from \"./store/reducer\";\nimport axios from \"axios\";\n\nclass TodoList extends React.Component {\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    state = {\n        tasks: [],\n        filterValue: \"All\"\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {\n            this.saveState()\n        })\n    };\n\n    // saveState = () => {\n    //     //переводим объект в строку\n    //     let stateAsString = JSON.stringify(this.state);\n    //     // сохраняем стэйт в localStorage под ключом 'our-state'\n    //     localStorage.setItem('our-state-' + this.props.id, stateAsString)\n    // };\n\n    restoreState = () => {\n        axios.get(`https://social-network.samuraijs.com/api/1.1/todo-lists/${this.props.id}/tasks`,\n            {\n                withCredentials: true,\n                headers: {'API-KEY': '6ab52400-1718-48c6-9e57-f24fa6232ed9'}\n            }\n        )\n            .then(res => {\n                let allTasks = res.data.items;\n                this.props.setTasks(allTasks, this.props.id);\n        })\n    };\n\n    addItem = (newTitle) => {\n        axios.post(`https://social-network.samuraijs.com/api/1.1/todo-lists/${this.props.id}/tasks`,\n            {title: newTitle},\n            {\n                withCredentials: true,\n                headers: {'API-KEY': '6ab52400-1718-48c6-9e57-f24fa6232ed9'}\n            }\n        )\n            .then(res => {\n                let newTitle = res.data.data.item;\n                this.props.addTask(newTitle, this.props.id)\n            });\n    };\n\n\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status: status})\n    };\n\n    changeTitle = (taskId, newTitle, todolistId) => {\n        this.changeTask(taskId, {title: newTitle}, todolistId)\n    };\n\n    changeTask = (taskId, obj) => {\n\n        let task = this.props.tasks.find(t => (t.id === taskId));\n        let updatedTask = {\n            title: task.title,\n            description: task.description,\n            completed: task.completed,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...obj\n        };\n\n        axios.put(`https://social-network.samuraijs.com/api/1.1/todo-lists/${this.props.id}/tasks/${taskId}`,\n            updatedTask,\n            {\n                withCredentials: true,\n                headers: {'API-KEY': '6ab52400-1718-48c6-9e57-f24fa6232ed9'}\n            }\n        )\n            .then(res => {\n                let status = res.data.data.item.status;\n                console.log(status);\n                this.props.changeTaskAC(taskId, obj, this.props.id)\n            });\n    };\n\n    removeTodolist = () => {\n        axios.delete(`https://social-network.samuraijs.com/api/1.1/todo-lists/${this.props.id}`,\n            {\n                withCredentials: true,\n                headers: {'API-KEY': '6ab52400-1718-48c6-9e57-f24fa6232ed9'}\n            })\n            .then(res => {\n                this.props.removeTodolistAC(this.props.id);\n            })\n    };\n\n    removeTask = (taskId) => {\n        axios.delete(`https://social-network.samuraijs.com/api/1.1/todo-lists/${this.props.id}/tasks/${taskId}`,\n            {\n                withCredentials: true,\n                headers: {'API-KEY': '6ab52400-1718-48c6-9e57-f24fa6232ed9'}\n            })\n            .then(res => {\n                this.props.removeTask(this.props.id, taskId);\n            });\n    };\n\n    render = () => {\n\n        let {tasks = []} = this.props;\n\n        const getFilterTasks = (tasks) => {\n            return tasks.filter(t => {\n                        if (this.props.filterValue === 'Active') {\n                            return t.isDone === false;\n                        } else if (this.props.filterValue === 'Completed') {\n                            return t.isDone === true;\n                        } else {\n                            return true;\n                        }\n                    }\n            )\n        };\n\n        return (\n                <div className=\"App\">\n                    <div className=\"todoList\">\n\n                        <div className=\"todoList-header\">\n                            <TodoListTitle id={this.props.id}\n                                           title={this.props.title}\n                                           removeTodolist={this.removeTodolist}/>\n\n                            <AddNewItemForm addItem={this.addItem}/>\n                        </div>\n\n                        <TodoListTasks tasks={getFilterTasks(tasks)}\n                                       changeStatus={this.changeStatus}\n                                       changeTitle={this.changeTitle}\n                                       removeTask={this.removeTask}/>\n\n                        <TodoListFooter filterValue={this.state.filterValue} changeFilter={this.changeFilter}/>\n\n                    </div>\n                </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setTasks: (tasks, todolistId) => {\n            const action = setTaskAC(tasks, todolistId);\n            dispatch(action)\n        },\n        addTask: (newTask, todolistId) => {\n            const action = addTaskAC(newTask, todolistId);\n            dispatch(action)\n        },\n        changeTaskAC: (taskId, obj, todolistId) => {\n            const action = updateTaskAC(taskId, obj, todolistId);\n            dispatch(action)\n        },\n        removeTodolistAC: (todolistId) => {\n            const action = removeTodolistAC(todolistId);\n            dispatch(action);\n        },\n        removeTask : (todolistId, taskId) => {\n            const action = removeTaskAC(todolistId, taskId);\n            dispatch(action)\n        }\n    }\n};\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\nexport default ConnectedTodolist;","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList.jsx\";\nimport AddNewItemForm from \"./components/TodoListHeader/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTolistAC, setTodolistAc} from \"./store/reducer\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    restoreState = () => {\n        axios.get(\"https://social-network.samuraijs.com/api/1.1/todo-lists\",\n            {\n                withCredentials: true,\n                headers: {'API-KEY': '6ab52400-1718-48c6-9e57-f24fa6232ed9'}\n            })\n            .then(res => {\n                this.props.setTodolist(res.data)\n            });\n\n    };\n\n    addTodoList = (newTitle) => {\n        axios.post('https://social-network.samuraijs.com/api/1.1/todo-lists',\n            {title: newTitle},\n            {\n                withCredentials: true,\n                headers: {'API-KEY': '6ab52400-1718-48c6-9e57-f24fa6232ed9'}\n            }\n        )\n            .then(res => {\n                let newTodolist = res.data.data.item;\n                this.props.addTodolist(newTodolist)\n            });\n    };\n\n    render = () => {\n        const todoLists = this.props.todolists.map(tl => <TodoList id={tl.id}\n                                                                   key={tl.id}\n                                                                   title={tl.title}\n                                                                   tasks={tl.tasks}/>);\n        return (\n            <>\n                <div className=\"mainInput\">\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todoLists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists,\n        tasks: state.todolists.tasks\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodolist: (newTodolist) => {\n            const action = addTolistAC(newTodolist);\n            dispatch(action)\n        },\n        setTodolist: (resTodolist) => {\n            const action = setTodolistAc(resTodolist);\n            dispatch(action)\n        }\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n","import {createStore} from \"redux\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n        document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}