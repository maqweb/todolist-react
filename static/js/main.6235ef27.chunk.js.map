{"version":3,"sources":["serviceWorker.js","components/TodoListTasks/Task/Task.jsx","components/TodoListTasks/TodoListTasks.jsx","components/TodoListFooter/TodoListFooter.jsx","components/TodoListHeader/TodoListTitle.jsx","components/TodoListHeader/AddNewItemForm.jsx","store/reducer.js","api/api.js","TodoList.jsx","App.js","store/store.js","index.js"],"names":["Boolean","window","location","hostname","match","Task","state","editMode","title","_this","props","task","onIsDoneChanged","e","currentTarget","checked","changeStatus","id","onTitleChanged","setState","value","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","removeTask","render","priorityClass","priority","isDoneClass","isDone","react_default","a","createElement","className","type","status","onChange","onBlur","autoFocus","onClick","concat","React","Component","TodoListTasks","tasksElement","tasks","map","TodoListTasks_Task_Task","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","onChangeTodolistTitle","removeTodolist","AddNewItemForm","error","onAddItemClick","newTitle","trim","addItem","onInputChange","onKeyPress","errorClass","placeholder","initialState","todolists","reducer","arguments","length","undefined","action","_objectSpread","tl","newTodolist","Object","toConsumableArray","filter","todolistId","newTask","taskId","t","obj","instance","axios","create","withCredentials","baseURL","headers","API-KEY","api","getTodolists","get","getTasks","addTodoList","post","delete","changeTask","updatedTask","put","changeTodolistTitle","TodoList","newFilterValue","restoreState","then","res","allTasks","data","items","setTasks","item","addTask","find","TodoList_objectSpread","description","completed","startDate","deadline","changeTaskAC","removeTodolistAC","_this$props$tasks","TodoListHeader_TodoListTitle","TodoListHeader_AddNewItemForm","components_TodoListTasks_TodoListTasks","getFilterTasks","components_TodoListFooter_TodoListFooter","this","ConnectedTodolist","connect","dispatch","setTaskAC","addTaskAC","updateTaskAC","removeTaskAC","changeTodolistTitleAC","App","setTodolist","addTodolist","todoLists","src_TodoList","Fragment","ConnectedApp","addTolistAC","resTodolist","store","createStore","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6235ef27.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Task extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    };\r\n\r\n    onIsDoneChanged = (e) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        switch (status) {\r\n            case 2:\r\n                let trueStatus = 2;\r\n                return this.props.changeStatus(this.props.task.id, trueStatus);\r\n            default:\r\n                let falseStatus = 0;\r\n                return this.props.changeStatus(this.props.task.id, falseStatus);\r\n        }\r\n        // this.props.changeStatus(this.props.task.id, status);\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({\r\n            title: e.currentTarget.value\r\n        })\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.props.changeTitle(this.props.task.id, this.state.title);\r\n        this.setState({editMode: false})\r\n    };\r\n\r\n    onDeleteTask = () => {\r\n        this.props.removeTask(this.props.task.id);\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let priorityClass = this.props.task.priority === 'high' ? 'highPriority' :\r\n            this.props.task.priority === 'medium' ? 'mediumPriority' :\r\n                this.props.task.priority === 'low' ? 'lowPriority' : 'noPriority';\r\n\r\n        let isDoneClass = this.props.task.isDone === true ? 'done' : '';\r\n\r\n        return (\r\n            <div className='todoList-task'>\r\n\r\n                <input type='checkbox'\r\n                       checked={this.props.task.status === 2}\r\n                       onChange={this.onIsDoneChanged}/>\r\n\r\n                {this.state.editMode ?\r\n                    <input onBlur={this.deactivateEditMode}\r\n                           autoFocus={true}\r\n                           onChange={this.onTitleChanged}\r\n                           value={this.state.title} type=\"text\"/>\r\n\r\n                    : <span onClick={this.activateEditMode}\r\n                            className={`${priorityClass} ${isDoneClass}`}> {this.state.title}</span>}\r\n                <span> - priority: {this.props.task.priority}</span>\r\n\r\n                <button className=\"btn-tasks\" onClick={this.onDeleteTask}>X</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;\r\n\r\nTask.propTypes = {\r\n    title: PropTypes.string\r\n};","import React from \"react\";\nimport Task from \"./Task/Task\";\n\nclass TodoListTasks extends React.Component {\n\n    render = () => {\n\n        const tasksElement = this.props.tasks.map(task => {\n            return <Task key={task.id}\n                         task={task}\n                         changeStatus={this.props.changeStatus}\n                         changeTitle={this.props.changeTitle}\n                         removeTask={this.props.removeTask}/>\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElement}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n","import React from 'react';\nimport './../../App.css';\nimport PropTypes from 'prop-types';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n      isHidden: false\n    };\n\n    onAllFilterClick = () => {\n        this.props.changeFilter('All')\n    };\n    onCompletedFilterClick = () => {\n        this.props.changeFilter('Completed')\n    };\n    onActiveFilterClick = () => {\n        this.props.changeFilter('Active')\n    };\n\n    onShowFiltersClick = () => {\n        this.setState({isHidden: true})\n    };\n    onHideFiltersClick = () => {\n        this.setState({isHidden: false})\n    };\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>}\n\n                {!this.state.isHidden && <button onClick={this.onShowFiltersClick}>hide</button>}\n                {this.state.isHidden && <button onClick={this.onHideFiltersClick}>show</button>}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\nTodoListFooter.propTypes = {\n    filterValue: PropTypes.string\n};","import React from 'react';\nimport '../../App.css'\n\nclass TodoListTitle extends React.Component {\n\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true})\n    };\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.onChangeTodolistTitle(this.props.id, this.state.title)\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    };\n\n    render = () => {\n        return (\n                <div>\n\n                    {this.state.editMode\n                        ? <input value={this.state.title}\n                                 onBlur={this.deactivateEditMode}\n                                 onChange={this.onTitleChanged}\n                                 autoFocus={true} type=\"text\"/>\n                        : <h3 className=\"todoList-header__title\"\n                              onClick={this.activateEditMode}>{this.state.title}</h3>}\n\n                    <button onClick={this.props.removeTodolist} className=\"btn\">X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n","import React from 'react';\nimport '../../App.css'\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        title: ''\n    };\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title;\n        this.setState({title: ''});\n        if (newTitle.trim() === '') {\n            this.setState({\n                error: true\n            })\n        } else {\n            this.props.addItem(newTitle);\n            this.setState({\n                error: false\n            })\n        }\n    };\n\n    onInputChange = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick();\n            this.setState({\n                title: ''\n            })\n        }\n    };\n\n    render = () => {\n\n        let errorClass = this.state.error === true ? 'error' : '';\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n\n                <input type=\"text\"\n                       onChange={this.onInputChange}\n                       onKeyPress={this.onKeyPress}\n                       className={errorClass}\n                       value={this.state.title}\n                       placeholder=\"New item name\"/>\n\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","export const ADD_TODOLIST = 'ADD-TODOLIST';\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST';\nexport const ADD_TASK = 'ADD-TASK';\nexport const SET_TASKS = 'SET_TASKS';\nexport const REMOVE_TASK = 'REMOVE-TASK';\nexport const CHANGE_TASK = 'CHANGE-TASK';\nexport const SET_TODOLIST = 'SET_TODOLIST';\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE';\n\nconst initialState = {\n    todolists: [\n        // {\n        //     id: 1, title: \"first\", tasks: [\n        //         {title: \"html/css\", isDone: false, id: 1, priority: \"low\"},\n        //         {title: \"javascript\", isDone: false, id: 2, priority: \"high\"},\n        //         {title: \"react\", isDone: false, id: 3, priority: \"high\"},\n        //     ]\n        // },\n        // {id: 2, title: \"second\", tasks: []},\n        // {id: 3, title: \"third\", tasks: []},\n    ]\n};\n\nconst reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case SET_TODOLIST:\n            return {\n              ...state,\n              todolists: action.todolists.map(tl => ({...tl, tasks: []}) )\n            };\n\n        case ADD_TODOLIST:\n            return {\n                ...state,\n                todolists: [action.newTodolist, ...state.todolists]\n            };\n\n        case REMOVE_TODOLIST:\n            return {\n                ...state,\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\n            };\n\n        case CHANGE_TODOLIST_TITLE:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {...tl, title: action.newTitle}\n                    } else {\n                        return tl\n                    }\n                })\n            };\n\n        case SET_TASKS:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {...tl, tasks: action.tasks}\n                    } else {\n                        return tl;\n                    }\n                })\n            };\n\n        case ADD_TASK:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {...tl, tasks: [action.newTask, ...tl.tasks]}\n                    } else {\n                        return tl;\n                    }\n                })\n            };\n\n        case REMOVE_TASK:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {...tl, tasks: tl.tasks.filter(tl => tl.id !== action.taskId)}\n                    } else {\n                        return tl\n                    }\n                })\n            };\n\n        case CHANGE_TASK:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {\n                            ...tl,\n                            tasks: tl.tasks.map(t => {\n                                if (t.id === action.taskId) {\n                                    return {...t, ...action.obj}\n                                } else {\n                                    return t\n                                }\n                            }),\n                        }\n                    } else {\n                        return tl\n                    }\n                })\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport const setTodolistAc = (todolists) => {\n    return {type: SET_TODOLIST, todolists}\n};\n\nexport const addTolistAC = (newTodolist) => {\n    return {type: ADD_TODOLIST, newTodolist}\n};\n\nexport const removeTodolistAC = (todolistId) => {\n    return {type: REMOVE_TODOLIST, todolistId}\n};\n\nexport const setTaskAC = (tasks, todolistId) => {\n    return {type: SET_TASKS, tasks, todolistId}\n};\n\nexport const addTaskAC = (newTask, todolistId) => {\n    return {type: ADD_TASK, newTask, todolistId}\n};\n\nexport const updateTaskAC = (taskId, obj, todolistId) => {\n    return {type: CHANGE_TASK, taskId, obj, todolistId}\n};\n\nexport const removeTaskAC = (todolistId, taskId) => {\n    return {type: REMOVE_TASK, todolistId, taskId}\n};\n\nexport const changeTodolistTitleAC = (todolistId, newTitle) => {\n    return {type: CHANGE_TODOLIST_TITLE, todolistId, newTitle}\n};\n\nexport default reducer;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: `https://social-network.samuraijs.com/api/1.1/todo-lists/`,\n    headers: {'API-KEY': '6ab52400-1718-48c6-9e57-f24fa6232ed9'}\n});\n\nexport const api = {\n    getTodolists() {\n        return instance.get(``)\n    },\n    getTasks(todolistId) {\n        return instance.get(`${todolistId}/tasks`)\n    },\n    addTodoList(newTitle) {\n        return instance.post(``, {title: newTitle})\n    },\n    addItem(todolistId, newTitle) {\n        return instance.post(`${todolistId}/tasks`, {title: newTitle})\n    },\n    removeTodolist(todolistId) {\n        return instance.delete(`${todolistId}`)\n    },\n    removeTask(todolistId, taskId) {\n        return instance.delete(`${todolistId}/tasks/${taskId}`)\n    },\n    changeTask(todolistId, taskId, updatedTask) {\n        return instance.put(`${todolistId}/tasks/${taskId}`, updatedTask)\n    },\n    changeTodolistTitle(todolistId, newTitle) {\n        return instance.put(`${todolistId}`, {title: newTitle})\n    }\n};","import React from 'react';\nimport './App.css';\nimport TodoListTasks from './components/TodoListTasks/TodoListTasks';\nimport TodoListFooter from './components/TodoListFooter/TodoListFooter';\nimport TodoListTitle from \"./components/TodoListHeader/TodoListTitle\";\nimport AddNewItemForm from \"./components/TodoListHeader/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addTaskAC,\n    changeTodolistTitleAC,\n    removeTaskAC,\n    removeTodolistAC,\n    setTaskAC,\n    updateTaskAC\n} from \"./store/reducer\";\nimport {api} from \"./api/api\";\n\nclass TodoList extends React.Component {\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    state = {\n        tasks: [],\n        filterValue: \"All\"\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        })\n    };\n\n    restoreState = () => {\n        api.getTasks(this.props.id)\n            .then(res => {\n                let allTasks = res.data.items;\n                this.props.setTasks(allTasks, this.props.id);\n            })\n    };\n\n    addItem = (newTitle) => {\n        api.addItem(this.props.id, newTitle)\n            .then(res => {\n                let newTitle = res.data.data.item;\n                this.props.addTask(newTitle, this.props.id)\n            });\n    };\n\n\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status: status})\n    };\n\n    changeTitle = (taskId, newTitle, todolistId) => {\n        this.changeTask(taskId, {title: newTitle}, todolistId)\n    };\n\n    onChangeTodolistTitle = (todolistId, newTitle) => {\n        api.changeTodolistTitle(todolistId, newTitle)\n            .then(res => {\n                this.props.changeTodolistTitle(todolistId, newTitle)\n            })\n    };\n\n    changeTask = (taskId, obj) => {\n\n        let task = this.props.tasks.find(t => (t.id === taskId));\n        let updatedTask = {\n            title: task.title,\n            description: task.description,\n            completed: task.completed,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...obj\n        };\n\n        api.changeTask(this.props.id, taskId, updatedTask)\n            .then(res => {\n                this.props.changeTaskAC(taskId, obj, this.props.id)\n            });\n    };\n\n    removeTodolist = () => {\n        api.removeTodolist(this.props.id)\n            .then(res => {\n                this.props.removeTodolistAC(this.props.id);\n            })\n    };\n\n    removeTask = (taskId) => {\n        api.removeTask(this.props.id, taskId)\n            .then(res => {\n                this.props.removeTask(this.props.id, taskId);\n            });\n    };\n\n    render = () => {\n\n        let {tasks = []} = this.props;\n\n        const getFilterTasks = (tasks) => {\n            return tasks.filter(t => {\n                    if (this.props.filterValue === 'Active') {\n                        return t.isDone === false;\n                    } else if (this.props.filterValue === 'Completed') {\n                        return t.isDone === true;\n                    } else {\n                        return true;\n                    }\n                }\n            )\n        };\n\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n\n                    <div className=\"todoList-header\">\n                        <TodoListTitle id={this.props.id}\n                                       title={this.props.title}\n                                       removeTodolist={this.removeTodolist}\n                                       onChangeTodolistTitle={this.onChangeTodolistTitle}/>\n\n                        <AddNewItemForm addItem={this.addItem}/>\n                    </div>\n\n                    <TodoListTasks tasks={getFilterTasks(tasks)}\n                                   changeStatus={this.changeStatus}\n                                   changeTitle={this.changeTitle}\n                                   removeTask={this.removeTask}/>\n\n                    <TodoListFooter filterValue={this.state.filterValue} changeFilter={this.changeFilter}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setTasks: (tasks, todolistId) => {\n            const action = setTaskAC(tasks, todolistId);\n            dispatch(action);\n        },\n        addTask: (newTask, todolistId) => {\n            const action = addTaskAC(newTask, todolistId);\n            dispatch(action);\n        },\n        changeTaskAC: (taskId, obj, todolistId) => {\n            const action = updateTaskAC(taskId, obj, todolistId);\n            dispatch(action);\n        },\n        removeTodolistAC: (todolistId) => {\n            const action = removeTodolistAC(todolistId);\n            dispatch(action);\n        },\n        removeTask: (todolistId, taskId) => {\n            const action = removeTaskAC(todolistId, taskId);\n            dispatch(action);\n        },\n        changeTodolistTitle: (todolistId, newTitle) => {\n            const action = changeTodolistTitleAC(todolistId, newTitle);\n            dispatch(action);\n        }\n    }\n};\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\nexport default ConnectedTodolist;","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList.jsx\";\nimport AddNewItemForm from \"./components/TodoListHeader/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTolistAC, setTodolistAc} from \"./store/reducer\";\nimport {api} from \"./api/api\";\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    restoreState = () => {\n        api.getTodolists()\n            .then(res => {\n            this.props.setTodolist(res.data)\n        });\n\n    };\n\n    addTodoList = (newTitle) => {\n        api.addTodoList(newTitle)\n            .then(res => {\n                let newTodolist = res.data.data.item;\n                this.props.addTodolist(newTodolist)\n            });\n    };\n\n    render = () => {\n        const todoLists = this.props.todolists.map(tl => <TodoList id={tl.id}\n                                                                   key={tl.id}\n                                                                   title={tl.title}\n                                                                   tasks={tl.tasks}/>);\n        return (\n            <>\n                <div className=\"mainInput\">\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todoLists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists,\n        tasks: state.todolists.tasks\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodolist: (newTodolist) => {\n            const action = addTolistAC(newTodolist);\n            dispatch(action)\n        },\n        setTodolist: (resTodolist) => {\n            const action = setTodolistAc(resTodolist);\n            dispatch(action)\n        }\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n","import {createStore} from \"redux\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n        document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}