{"version":3,"sources":["serviceWorker.js","components/TodoListTasks/Task/Task.jsx","components/TodoListTasks/TodoListTasks.jsx","components/TodoListFooter/TodoListFooter.jsx","components/TodoListHeader/TodoListTitle.jsx","components/TodoListHeader/AddNewItemForm.jsx","TodoList.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Task","state","editMode","onIsDoneChanged","e","_this","props","changeStatus","task","id","currentTarget","checked","onTitleChanged","changeTitle","value","activateEditMode","setState","deactivateEditMode","render","priorityClass","priority","isDoneClass","isDone","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","title","onClick","concat","React","Component","TodoListTasks","tasksElement","tasks","map","TodoListTasks_Task_Task","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","AddNewItemForm","error","onAddItemClick","newTitle","trim","addItem","onInputChange","onKeyPress","errorClass","placeholder","TodoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","newTask","length","newTasks","Object","toConsumableArray","newFilterValue","taskId","changeTask","obj","t","_objectSpread","TodoListHeader_TodoListTitle","TodoListHeader_AddNewItemForm","components_TodoListTasks_TodoListTasks","filter","components_TodoListFooter_TodoListFooter","this","App","todolists","addTodoList","newTodoList","todoLists","tl","src_TodoList","Fragment","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07d0fb28.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Task extends React.Component {\r\n\r\n    state = {\r\n        editMode: false\r\n    };\r\n\r\n    onIsDoneChanged = (e) => {\r\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked)\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.props.changeTitle(this.props.task.id, e.currentTarget.value);\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    };\r\n\r\n\r\n\r\n    render = () => {\r\n\r\n        let priorityClass = this.props.task.priority === 'high' ? 'highPriority' :\r\n            this.props.task.priority === 'medium' ? 'mediumPriority' :\r\n                this.props.task.priority === 'low' ? 'lowPriority' : 'noPriority';\r\n\r\n        let isDoneClass = this.props.task.isDone === true ? 'done' : '';\r\n\r\n        return (\r\n            <div className='todoList-task'>\r\n\r\n                <input type='checkbox'\r\n                       checked={this.props.task.isDone}\r\n                       onChange={this.onIsDoneChanged}/>\r\n\r\n                {this.state.editMode ?\r\n                    <input onBlur={this.deactivateEditMode}\r\n                           autoFocus={true}\r\n                           onChange={this.onTitleChanged}\r\n                           value={this.props.task.title} type=\"text\"/>\r\n\r\n                    : <span onClick={this.activateEditMode}\r\n                            className={`${priorityClass} ${isDoneClass}`}>{this.props.task.id} - {this.props.task.title}</span> } <span> - priority: {this.props.task.priority}</span>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;\r\n\r\nTask.propTypes = {\r\n    title: PropTypes.string\r\n};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Task from \"./Task/Task\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        const tasksElement = this.props.tasks.map(task => {\n            return <Task key={task.id}\n                         task={task}\n                         changeStatus={this.props.changeStatus}\n                         changeTitle={this.props.changeTitle}/>\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElement}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\nTodoListTasks.propTypes = {\n    tasks: PropTypes.array\n};","import React from 'react';\nimport './../../App.css';\nimport PropTypes from 'prop-types';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n      isHidden: false\n    };\n\n    onAllFilterClick = () => {\n        this.props.changeFilter('All')\n    };\n    onCompletedFilterClick = () => {\n        this.props.changeFilter('Completed')\n    };\n    onActiveFilterClick = () => {\n        this.props.changeFilter('Active')\n    };\n\n    onShowFiltersClick = () => {\n        this.setState({isHidden: true})\n    };\n    onHideFiltersClick = () => {\n        this.setState({isHidden: false})\n    };\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>}\n\n                {!this.state.isHidden && <span onClick={this.onShowFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onHideFiltersClick}>show</span>}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\nTodoListFooter.propTypes = {\n    filterValue: PropTypes.string\n};","import React from 'react';\nimport '../../App.css'\n\nclass TodoListTitle extends React.Component {\n\n    render = (props) => {\n        return (\n            <h3 className=\"todoList-header__title\">{this.props.title}</h3>\n        );\n    }\n}\n\nexport default TodoListTitle;\n","import React from 'react';\nimport '../../App.css'\n\nclass AddNewItemForm extends React.Component {\n\n    state = {\n        error: false,\n        title: ''\n    };\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title;\n        this.setState({title: ''});\n        if (newTitle.trim() === '') {\n            this.setState({\n                error: true\n            })\n        } else {\n            this.props.addItem(newTitle);\n            this.setState({\n                error: false\n            })\n        }\n    };\n\n    onInputChange = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick();\n            this.setState({\n                title: ''\n            })\n        }\n    };\n\n    render = (props) => {\n\n        let errorClass = this.state.error === true ? 'error' : '';\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n\n                <input type=\"text\"\n                       onChange={this.onInputChange}\n                       onKeyPress={this.onKeyPress}\n                       className={errorClass}\n                       value={this.state.title}\n                       placeholder=\"New item name\"/>\n\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from './components/TodoListTasks/TodoListTasks';\nimport TodoListFooter from './components/TodoListFooter/TodoListFooter';\nimport TodoListTitle from \"./components/TodoListHeader/TodoListTitle\";\nimport AddNewItemForm from \"./components/TodoListHeader/AddNewItemForm\";\n\nclass TodoList extends React.Component {\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    state = {\n        tasks: [\n            // {id: 1, title: 'HTML', isDone: true, priority: 'low'},\n            // {id: 2, title: 'CSS', isDone: true, priority: 'low'},\n            // {id: 3, title: 'JS', isDone: true, priority: 'medium'},\n            // {id: 4, title: 'React', isDone: false, priority: 'high'},\n            // {id: 5, title: 'Redux', isDone: false, priority: 'high'}\n        ],\n        filterValue: \"All\"\n    };\n\n    saveState = () => {\n        //переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем стэйт в localStorage под ключом 'our-state'\n        localStorage.setItem('our-state-' + this.props.id, stateAsString)\n    };\n\n    restoreState = () => {\n        let state = {\n            tasks: [],\n            filterValue: 'All'\n        };\n        let stateAsString = localStorage.getItem('our-state-' + this.props.id);\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state);\n    };\n\n    addItem = (newTitle) => {\n        let newTask = {\n            id: this.state.tasks.length + 1,\n            title: newTitle,\n            isDone: false,\n            priority: 'no'\n\n        };\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState({tasks: newTasks}, () => {\n            this.saveState()\n        });\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {\n            this.saveState()\n        })\n    };\n\n    changeStatus = (taskId, isDone) => {\n        this.changeTask(taskId, {isDone: isDone})\n    };\n\n    changeTitle = (taskId, newTitle) => {\n        this.changeTask(taskId, {title: newTitle})\n    };\n\n    changeTask = (taskId, obj) => {\n        let newTasks = this.state.tasks.map(t => {\n            if (t.id === taskId) {\n                return {...t, ...obj}\n            } else {\n                return t\n            }\n        });\n        this.setState({\n            tasks: newTasks\n        }, () => {\n            this.saveState()\n        })\n    };\n\n    render = () => {\n\n        const getFilterTasks = (tasks) => {\n            return tasks.filter(t => {\n                    if (this.state.filterValue === 'Active') {\n                        return t.isDone === false;\n                    } else if (this.state.filterValue === 'Completed') {\n                        return t.isDone === true;\n                    } else {\n                        return true;\n                    }\n                }\n            )\n        };\n\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n\n                    <div className=\"todoList-header\">\n                        <TodoListTitle title={this.props.title}/>\n                        <AddNewItemForm addItem={this.addItem}/>\n                    </div>\n\n                    <TodoListTasks tasks={getFilterTasks(this.state.tasks)}\n                                   changeStatus={this.changeStatus}\n                                   changeTitle={this.changeTitle}/>\n\n                    <TodoListFooter filterValue={this.state.filterValue} changeFilter={this.changeFilter}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoList;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList.jsx\";\nimport AddNewItemForm from \"./components/TodoListHeader/AddNewItemForm\";\n\nclass App extends React.Component {\n\n    state = {\n        todolists: []\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('our-todo-list', stateAsString)\n    };\n\n    restoreState = () => {\n\n        let state = this.state;\n        let stateAsString = localStorage.getItem('our-todo-list');\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state)\n    };\n\n    addTodoList = (newTitle) => {\n        let newTodoList = {\n            id: this.state.todolists.length + 1,\n            title: newTitle\n        };\n        this.setState({\n            todolists: [...this.state.todolists, newTodoList]\n        }, this.saveState)\n    };\n\n    render = () => {\n\n        const todoLists = this.state.todolists.map(tl => <TodoList id={tl.id} key={tl.id} title={tl.title}/>);\n\n        return (\n            <>\n                <div className=\"mainInput\">\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todoLists}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}