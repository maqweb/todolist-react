{"version":3,"sources":["components/TodoListHeader/TodoListHeader.jsx","components/TodoListTasks/TodoListTask/TodoListTask.jsx","components/TodoListTasks/TodoListTasks.jsx","components/TodoListFooter/TodoListFooter.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoListHeader","render","react_default","a","createElement","className","type","placeholder","React","Component","TodoListTask","props","priorityClass","_this","priority","checked","isDone","title","TodoListTasks","tasksElement","tasks","map","task","TodoListTasks_TodoListTask_TodoListTask","TodoListFooter","classForAll","filterValue","classForCompleted","classForActive","App","components_TodoListHeader_TodoListHeader","components_TodoListTasks_TodoListTasks","components_TodoListFooter_TodoListFooter","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAmBeA,mNAhBbC,OAAS,WACP,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,YAAY,kBAC/BL,EAAAC,EAAAC,cAAA,qDARmBI,IAAMC,YCgBpBC,6MAfXT,OAAS,SAACU,GAEN,IAAIC,EAAgBC,EAAKF,MAAMG,SAI/B,OAHiCF,EAAT,SAAxBC,EAAKF,MAAMG,SAAsC,eACzB,WAAxBD,EAAKF,MAAMG,SAAwC,iBAAmC,cAGlFZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWS,QAASF,EAAKF,MAAMK,SAC3Cd,EAAAC,EAAAC,cAAA,QAAMC,UAAWO,GAAjB,IAAkCC,EAAKF,MAAMM,MAA7C,iBAAkEJ,EAAKF,MAAMG,SAA7E,oCAVWN,IAAMC,WCgBlBS,6MAdXjB,OAAS,SAACU,GAEN,IAAMQ,EAAeN,EAAKF,MAAMS,MAAMC,IAAI,SAAAC,GACtC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,CAAcN,MAAOK,EAAKL,MAAOD,OAAQM,EAAKN,OAAQF,SAAUQ,EAAKR,aAGhF,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACTc,iCATUX,IAAMC,WCiBnBe,6MAhBXvB,OAAS,WAEL,IAAIwB,EAAyC,QAA3BZ,EAAKF,MAAMe,YAAwB,SAAW,GAC5DC,EAA+C,cAA3Bd,EAAKF,MAAMe,YAA8B,SAAW,GACxEE,EAA4C,WAA3Bf,EAAKF,MAAMe,YAA2B,SAAW,GAEtE,OACIxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAWoB,GAAnB,OACAvB,EAAAC,EAAAC,cAAA,UAAQC,UAAWsB,GAAnB,aACAzB,EAAAC,EAAAC,cAAA,UAAQC,UAAWuB,GAAnB,yCAXapB,IAAMC,WC4BpBoB,6MAvBVT,MAAQ,CACL,CAACH,MAAO,OAAQD,QAAQ,EAAMF,SAAU,OACxC,CAACG,MAAO,MAAOD,QAAQ,EAAMF,SAAU,OACvC,CAACG,MAAO,KAAMD,QAAQ,EAAMF,SAAU,UACtC,CAACG,MAAO,QAASD,QAAQ,EAAOF,SAAU,QAC1C,CAACG,MAAO,QAASD,QAAQ,EAAOF,SAAU,WAG7CY,YAAc,QAEfzB,OAAS,WACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAeX,MAAOP,EAAKO,QAC3BlB,EAAAC,EAAAC,cAAC4B,EAAD,CAAgBN,YAAab,EAAKa,8CAlBpClB,IAAMC,WCMJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrC,OAAOC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d380f174.chunk.js","sourcesContent":["import React from 'react';\n\nclass TodoListHeader extends React.Component {\n  render = () => {\n    return (\n\n      <div className=\"todoList-header\">\n        <h3 className=\"todoList-header__title\">What to Learn</h3>\n        <div className=\"todoList-newTaskForm\">\n          <input type=\"text\" placeholder=\"New task name\" />\n          <button>Add</button>\n        </div>\n      </div>\n\n\n    );\n  }\n}\n\nexport default TodoListHeader;\n\n","import React from \"react\";\r\n\r\nclass TodoListTask extends React.Component {\r\n    render = (props) => {\r\n\r\n        let priorityClass = this.props.priority;\r\n        this.props.priority === 'high' ? priorityClass = \"highPriority\" :\r\n        this.props.priority === 'medium' ? priorityClass = \"mediumPriority\" : priorityClass = \"lowPriority\";\r\n\r\n        return (\r\n            <div className=\"todoList-task\">\r\n                <input type=\"checkbox\" checked={this.props.isDone} />\r\n                <span className={priorityClass}> {this.props.title} / priority - {this.props.priority} </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoListTask;\r\n","import React from \"react\";\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = (props) => {\n\n        const tasksElement = this.props.tasks.map(task => {\n            return <TodoListTask title={task.title} isDone={task.isDone} priority={task.priority} />\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                { tasksElement }\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;","import React from 'react';\nimport './../../App.css';\n\nclass TodoListFooter extends React.Component {\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                <button className={classForAll}>All</button>\n                <button className={classForCompleted}>Completed</button>\n                <button className={classForActive}>Active</button>\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;","import React from 'react';\nimport './App.css';\nimport TodoListHeader from './components/TodoListHeader/TodoListHeader';\nimport TodoListTasks from './components/TodoListTasks/TodoListTasks';\nimport TodoListFooter from './components/TodoListFooter/TodoListFooter';\n\nclass App extends React.Component {\n\n     tasks = [\n        {title: 'HTML', isDone: true, priority: 'low'},\n        {title: 'CSS', isDone: true, priority: 'low'},\n        {title: 'JS', isDone: true, priority: 'medium'},\n        {title: 'React', isDone: false, priority: 'high'},\n        {title: 'Redux', isDone: false, priority: 'high'}\n    ];\n\n     filterValue = \"All\";\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <TodoListHeader/>\n                    <TodoListTasks tasks={this.tasks}/>\n                    <TodoListFooter filterValue={this.filterValue}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}