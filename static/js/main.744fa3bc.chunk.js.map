{"version":3,"sources":["components/TodoListHeader/TodoListHeader.jsx","components/TodoListTasks/Task/Task.jsx","components/TodoListTasks/TodoListTasks.jsx","components/TodoListFooter/TodoListFooter.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoListHeader","state","error","title","onAddTaskClick","newText","_this","setState","trim","props","addTask","onInputChange","e","currentTarget","value","keyPress","key","render","errorClass","react_default","a","createElement","className","type","onChange","onKeyPress","placeholder","onClick","React","Component","Task","editMode","onIsDoneChanged","changeStatus","task","id","checked","onTitleChanged","changeTitle","activateEditMode","deactivateEditMode","priorityClass","priority","isDoneClass","isDone","onBlur","autoFocus","concat","TodoListTasks","tasksElement","tasks","map","TodoListTasks_Task_Task","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","App","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","newTask","length","newTasks","Object","toConsumableArray","newFilterValue","taskId","changeTask","newTitle","obj","t","_objectSpread","components_TodoListHeader_TodoListHeader","components_TodoListTasks_TodoListTasks","filter","components_TodoListFooter_TodoListFooter","this","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.744fa3bc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../App.css'\n\nclass TodoListHeader extends React.Component {\n\n    state = {\n        error: false,\n        title: ''\n    };\n\n    onAddTaskClick = () => {\n        let newText = this.state.title;\n        this.setState({title: ''});\n        if (newText.trim() === '') {\n            this.setState({\n                error: true\n            })\n        } else {\n            this.props.addTask(newText);\n            this.setState({\n                error: false\n            })\n        }\n    };\n\n    onInputChange = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    keyPress = (e) => {\n        if (e.key === 'Enter') {\n            this.onAddTaskClick();\n            this.setState({\n                title: ''\n            })\n        }\n    };\n\n    render = (props) => {\n\n        let errorClass = this.state.error === true ? 'error' : '';\n\n        return (\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">What to Learn</h3>\n                <div className=\"todoList-newTaskForm\">\n\n                    <input type=\"text\"\n                           onChange={this.onInputChange}\n                           onKeyPress={this.keyPress}\n                           className={errorClass}\n                           value={this.state.title}\n                           placeholder=\"New task name\"/>\n\n                    <button onClick={this.onAddTaskClick}>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoListHeader;\n\nTodoListHeader.propTypes = {\n    onAddTaskClick: PropTypes.func\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Task extends React.Component {\r\n\r\n    state = {\r\n        editMode: false\r\n    };\r\n\r\n    onIsDoneChanged = (e) => {\r\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked)\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.props.changeTitle(this.props.task.id, e.currentTarget.value);\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    };\r\n\r\n\r\n\r\n    render = () => {\r\n\r\n        let priorityClass = this.props.task.priority === 'high' ? 'highPriority' :\r\n            this.props.task.priority === 'medium' ? 'mediumPriority' :\r\n                this.props.task.priority === 'low' ? 'lowPriority' : 'noPriority';\r\n\r\n        let isDoneClass = this.props.task.isDone === true ? 'done' : '';\r\n\r\n        return (\r\n            <div className='todoList-task'>\r\n\r\n                <input type='checkbox'\r\n                       checked={this.props.task.isDone}\r\n                       onChange={this.onIsDoneChanged}/>\r\n\r\n                {this.state.editMode ?\r\n                    <input onBlur={this.deactivateEditMode}\r\n                           autoFocus={true}\r\n                           onChange={this.onTitleChanged}\r\n                           value={this.props.task.title} type=\"text\"/>\r\n\r\n                    : <span onClick={this.activateEditMode}\r\n                            className={`${priorityClass} ${isDoneClass}`}>{this.props.task.id} - {this.props.task.title}</span> } <span> - priority: {this.props.task.priority}</span>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;\r\n\r\nTask.propTypes = {\r\n    title: PropTypes.string\r\n};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Task from \"./Task/Task\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        const tasksElement = this.props.tasks.map(task => {\n            return <Task key={task.id}\n                         task={task}\n                         changeStatus={this.props.changeStatus}\n                         changeTitle={this.props.changeTitle}/>\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElement}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\nTodoListTasks.propTypes = {\n    tasks: PropTypes.array\n};","import React from 'react';\nimport './../../App.css';\nimport PropTypes from 'prop-types';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n      isHidden: false\n    };\n\n    onAllFilterClick = () => {\n        this.props.changeFilter('All')\n    };\n    onCompletedFilterClick = () => {\n        this.props.changeFilter('Completed')\n    };\n    onActiveFilterClick = () => {\n        this.props.changeFilter('Active')\n    };\n\n    onShowFiltersClick = () => {\n        this.setState({isHidden: true})\n    };\n    onHideFiltersClick = () => {\n        this.setState({isHidden: false})\n    };\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>}\n\n                {!this.state.isHidden && <span onClick={this.onShowFiltersClick}>hide</span>}\n                {this.state.isHidden && <span onClick={this.onHideFiltersClick}>show</span>}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\nTodoListFooter.propTypes = {\n    filterValue: PropTypes.string\n};","import React from 'react';\nimport './App.css';\nimport TodoListHeader from './components/TodoListHeader/TodoListHeader';\nimport TodoListTasks from './components/TodoListTasks/TodoListTasks';\nimport TodoListFooter from './components/TodoListFooter/TodoListFooter';\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    state = {\n        tasks: [\n            // {id: 1, title: 'HTML', isDone: true, priority: 'low'},\n            // {id: 2, title: 'CSS', isDone: true, priority: 'low'},\n            // {id: 3, title: 'JS', isDone: true, priority: 'medium'},\n            // {id: 4, title: 'React', isDone: false, priority: 'high'},\n            // {id: 5, title: 'Redux', isDone: false, priority: 'high'}\n        ],\n        filterValue: \"All\"\n    };\n\n    saveState = () => {\n        //переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем стэйт в localStorage под ключом 'our-state'\n        localStorage.setItem('our-state', stateAsString)\n    };\n\n    restoreState = () => {\n        let state = {\n            tasks: [],\n            filterValue: 'All'\n        };\n        let stateAsString = localStorage.getItem('our-state');\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state);\n    };\n\n    addTask = (newText) => {\n        let newTask = {\n            id: this.state.tasks.length + 1,\n            title: newText,\n            isDone: false,\n            priority: 'no'\n\n        };\n        let newTasks = [...this.state.tasks, newTask];\n        this.setState({tasks: newTasks}, () => {this.saveState()});\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {this.saveState()})\n    };\n\n    changeStatus = (taskId, isDone) => {\n        this.changeTask(taskId, {isDone: isDone})\n    };\n\n    changeTitle = (taskId, newTitle) => {\n        this.changeTask(taskId, {title: newTitle})\n    };\n\n    changeTask = (taskId, obj) => {\n        let newTasks = this.state.tasks.map(t => {\n            if (t.id === taskId) {\n                return {...t, ...obj}\n            } else {\n                return t\n            }\n        });\n        this.setState({\n            tasks: newTasks\n        }, () => {this.saveState()})\n    };\n\n    render = () => {\n\n        const getFilterTasks = (tasks) => {\n            return (\n                tasks.filter(t => {\n                    if (this.state.filterValue === 'All') {\n                        return true;\n                    } else if (this.state.filterValue === 'Active') {\n                        return t.isDone === false;\n                    } else if (this.state.filterValue === 'Completed') {\n                        return t.isDone === true;\n                    }\n                })\n            )\n        };\n\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <TodoListHeader addTask={this.addTask}/>\n\n                    <TodoListTasks tasks={getFilterTasks(this.state.tasks)}\n                                   changeStatus={this.changeStatus}\n                                   changeTitle={this.changeTitle}/>\n\n                    <TodoListFooter filterValue={this.state.filterValue} changeFilter={this.changeFilter}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}